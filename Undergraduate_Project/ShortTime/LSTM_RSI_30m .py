#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  9 08:54:37 2022

@author: shoujakymn
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  8 20:42:21 2022

@author: shoujakymn
"""

# -*- coding: utf-8 -*-
"""LSTMv2_only_price_m_pred_btc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OM6ZNCxUhbqCtdVSAoFoV7N8y-RUAHfr
"""

from numpy import array
import tensorflow as tf
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Flatten
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import glob


def form(yhat,y,mode,ix=3):
    tp=[0]
    tn=[0]
    fn=[0]
    fp=[0]
    yuzdelik=[[0],[0],[0],[0]]
    if mode==1:
        for index,i in enumerate(yhat):
            result=i[ix]-y[index-1,ix]
            if index==0:
                continue
            if y[index-1,ix]>y[index,ix]:#dusmus
                if result>0: 
                    fn.append(abs(i[ix]-y[index,ix]))#negatif
                    yuzdelik[2].append((y[index,ix]/y[index-1,ix]+0.001)-1)
                else:
                    tn.append(abs(i[ix]-y[index,ix]))
                    yuzdelik[3].append((y[index,ix]/y[index-1,ix]+0.001)-1)
            else:  #artmis
                if result>0: 
                    tp.append(abs(i[ix]-y[index,ix]))#negatif
                    yuzdelik[0].append((y[index,ix]/y[index-1,ix]+0.001)-1)
                else:
                    fp.append(abs(i[ix]-y[index,ix]))
                    yuzdelik[1].append((y[index,ix]/y[index-1,ix]+0.001)-1)
    elif mode==0:
        count_t=0
        count_g=0
        count_l=0
        count_w=[0]
        count_ls=[0]
        count_tr=[0]
        price_pred=[0]
        price_per=[0]
        for index,i in enumerate(yhat):
            result=i-y[index-1]
            if index==0:
                continue
            if y[index-1]>y[index]:#dusmus
                if result>0: 
                    fn.append(abs(i-y[index]))#negatif
                    yuzdelik[2].append((y[index]/y[index-1]+0.001)-1)
                    price_per.append((y[index]/y[index-1]+0.001)-1)
                    count_ls.append(count_l)
                    count_tr.append(count_t)
                    price_pred.append(0)
                    count_l=0
                    count_t=0
                else:
                    tn.append(abs(i-y[index]))
                    yuzdelik[3].append((y[index]/y[index-1]+0.001)-1)
                    price_per.append((y[index]/y[index-1]+0.001)-1)
                    count_l+=1
                    count_t+=1
                    price_pred.append(1)
            else:  #artmis
                if result>0: 
                    tp.append(abs(i-y[index]))#pozitif
                    yuzdelik[0].append((y[index]/y[index-1]+0.001)-1)
                    price_per.append((y[index]/y[index-1]+0.001)-1)
                    count_g+=1
                    count_t+=1    
                    price_pred.append(1)

                else:
                    fp.append(abs(i-y[index]))
                    yuzdelik[1].append((y[index]/y[index-1]+0.001)-1)
                    price_per.append((y[index]/y[index-1]+0.001)-1)
                    count_w.append(count_g)
                    count_tr.append(count_t)
                    count_g=0
                    count_t=0
                    price_pred.append(0)
        
    print()
    print('Count')
    print([len(tp)-1,len(fp)-1])
    print([len(fn)-1,len(tn)-1])
    print("acc %{}".format((len(tp)+len(tn)-2)/(len(tp)+len(fp)+len(fn)+len(tn)-4)))
    print()

    money=100
    for i in range(len(price_per)):
        if price_pred[i]==1:
          #print("+++money was",money," and rate is",price_per[i])
          money+=money*abs(price_per[i])
          #print("money become ",money)
        else:
          # print("---money was",money," and rate is",price_per[i])
          money-=money*abs(price_per[i])
          # print("money become ",money," and ",i)
    return count_tr,price_pred,price_per,money

# split a multivariate sequence into samples
def split_sequences(sequences, n_steps):
    X, y = list(), list()

    for i in range(len(sequences)):
        # find the end of this pattern
        end_ix = i + n_steps
        # check if we are beyond the dataset
        if end_ix > len(sequences):
            break
        # gather input and output parts of the pattern
        seq_x, seq_y = sequences[i:end_ix, :-1], sequences[end_ix-1, -1]
        X.append(seq_x)
        y.append(seq_y)
    
    return array(X), array(y)

def calc_rsi(dataset,rsi_ohlc=3,mode=0):
  dataset = pd.DataFrame(dataset,columns=["Open","High","Low","Close"])
  coin_rsi=dataset.copy()
  data=coin_rsi.copy()
  a=coin_rsi.columns[rsi_ohlc]
  coin_rsi.drop(coin_rsi.columns.difference([a]), 1, inplace=True)
  coin_rsi=coin_rsi.reset_index(drop=True,inplace=False)
  coin_rsi["diff"]=coin_rsi.diff(1)

  coin_rsi['gain'] = coin_rsi['diff'].clip(lower=0).round(2)
  coin_rsi['loss'] = coin_rsi['diff'].clip(upper=0).abs().round(2)
  coin_rsi

  window_length=14
  # Get initial Averages
  coin_rsi['avg_gain'] = coin_rsi['gain'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]
  coin_rsi['avg_loss'] = coin_rsi['loss'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]
  # View Result

  # View first SMA value

  for i, row in enumerate(coin_rsi['avg_gain'].iloc[window_length+1:]):
      coin_rsi['avg_gain'].iloc[i + window_length + 1] =\
          (coin_rsi['avg_gain'].iloc[i + window_length] *
          (window_length - 1) +
          coin_rsi['gain'].iloc[i + window_length + 1])\
          / window_length
  # Average Losses
  for i, row in enumerate(coin_rsi['avg_loss'].iloc[window_length+1:]):
      coin_rsi['avg_loss'].iloc[i + window_length + 1] =\
          (coin_rsi['avg_loss'].iloc[i + window_length] *
          (window_length - 1) +
          coin_rsi['loss'].iloc[i + window_length + 1])\
          / window_length
  # View initial results

  coin_rsi['rs'] = coin_rsi['avg_gain'] / coin_rsi['avg_loss']
  coin_rsi['rsi'] = 100 - (100 / (1.0 + coin_rsi['rs']))

  # View Result
  if mode==1:
    return np.array(coin_rsi["rsi"])[-1]
  return coin_rsi["rsi"]


dataset_t=pd.read_csv("./SOL_4h.csv")

dataset_train_c=dataset_t[["rsi_l","Open","High","Low","Close"]]

dataset_train_c=dataset_train_c.dropna()

dataset_train_c=dataset_train_c.reset_index(drop=True)


# choose a number of time steps
n_steps =3

# convert into input/output
pre_dataset_c=dataset_train_c.values.copy()
num=int(len(pre_dataset_c)*30/100)
pre_dataset_c.astype(float)
print(pre_dataset_c.shape)
X_c, y_c = split_sequences(pre_dataset_c[:,:], n_steps)
X_valid_c, y_valid_c = split_sequences(pre_dataset_c[-num:-int(num/2),:], n_steps)
X_test_c,y_test_c =split_sequences(pre_dataset_c[-int(num/2):,:], n_steps)

n_features=X_c.shape[2]
# define model
model_c = Sequential()
model_c.add(LSTM(units=50, input_shape=(n_steps, n_features), activation='relu'))
model_c.add(Dense(units=1))
model_c.compile(optimizer='adam', loss='mse', run_eagerly=True)
# choose a number of time steps


checkpoint_filepath = '/home/shoujakymn/Desktop/model_-91_acc/Suca/5 COINS/CP/SOL'
model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_filepath,
    save_weights_only=True,
    monitor='val_loss',
    mode='min',
    save_best_only=True)

# fit model
print(X_c.shape,y_c.shape)
#history_c=model_c.fit(X_c, y_c,validation_data=(X_valid_c,y_valid_c), epochs=3000, callbacks=[model_checkpoint_callback])


model_c.load_weights(checkpoint_filepath)

yhat_c = model_c.predict(X_c)
yhat_valid_c = model_c.predict(X_valid_c)
yhat_test_c=model_c.predict(X_test_c)

count,price,pred,money=form(yhat_c[:],y_c,mode=0)
print("Start Money=100 End Money=",money,"Gain(%)=",(money-100))

count,pred,rate,money=form(yhat_valid_c[:],y_valid_c,mode=0)
print("Start Money=100 End Money=",money,"Gain(%)=",(money-100),"Daily gain=",(money-100)/180)

count,pred,rate,money=form(yhat_test_c[:],y_test_c,mode=0)
print("Start Money=100 End Money=",money,"Gain(%)=",(money-100),"Daily gain=",(money-100)/180)

