# -*- coding: utf-8 -*-
"""LSTMv2_only_price_m_pred_btc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OM6ZNCxUhbqCtdVSAoFoV7N8y-RUAHfr
"""

from numpy import array
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Flatten
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import glob

!git clone https://github.com/binance/binance-public-data.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/binance-public-data/python

!python3 download-kline.py -s BTCUSDT  -i 1m -startDate 2015-01-01

def calc_rsi(dataset,rsi_ohlc=3,mode=0):
  dataset = pd.DataFrame(dataset,columns=["Open","High","Low","Close"])
  coin_rsi=dataset.copy()
  data=coin_rsi.copy()
  a=coin_rsi.columns[rsi_ohlc]
  coin_rsi.drop(coin_rsi.columns.difference([a]), 1, inplace=True)
  coin_rsi=coin_rsi.reset_index(drop=True,inplace=False)
  coin_rsi["diff"]=coin_rsi.diff(1)

  coin_rsi['gain'] = coin_rsi['diff'].clip(lower=0).round(2)
  coin_rsi['loss'] = coin_rsi['diff'].clip(upper=0).abs().round(2)
  coin_rsi

  window_length=14
  # Get initial Averages
  coin_rsi['avg_gain'] = coin_rsi['gain'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]
  coin_rsi['avg_loss'] = coin_rsi['loss'].rolling(window=window_length, min_periods=window_length).mean()[:window_length+1]
  # View Result

  # View first SMA value

  for i, row in enumerate(coin_rsi['avg_gain'].iloc[window_length+1:]):
      coin_rsi['avg_gain'].iloc[i + window_length + 1] =\
          (coin_rsi['avg_gain'].iloc[i + window_length] *
          (window_length - 1) +
          coin_rsi['gain'].iloc[i + window_length + 1])\
          / window_length
  # Average Losses
  for i, row in enumerate(coin_rsi['avg_loss'].iloc[window_length+1:]):
      coin_rsi['avg_loss'].iloc[i + window_length + 1] =\
          (coin_rsi['avg_loss'].iloc[i + window_length] *
          (window_length - 1) +
          coin_rsi['loss'].iloc[i + window_length + 1])\
          / window_length
  # View initial results

  coin_rsi['rs'] = coin_rsi['avg_gain'] / coin_rsi['avg_loss']
  coin_rsi['rsi'] = 100 - (100 / (1.0 + coin_rsi['rs']))

  # View Result
  if mode==1:
    return np.array(coin_rsi["rsi"])[-1]
  return coin_rsi["rsi"]

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/binance-public-data/python/data/spot/monthly/klines/BTCUSDT/1m
path = os.getcwd()
csv_files = glob.glob(os.path.join(path, "*.zip"))
li=[]
for f in csv_files:
      
    # read the csv file
    df = pd.read_csv(f, header=None)
    li.append(df)
    # print the location and filename
    print('Location:', f)
    print('File Name:', f.split("\\")[-1])
      
    # print the content
    print('Content:')
    display(df)
    print()
frame = pd.concat(li, ignore_index=True)
dataset_c=frame.copy()
dataset_c.columns
dataset_c.rename(columns={0:'Open time',1: 'Open',2: 'High',3: 'Low',4: 'Close',5: 'Volume',6: 'Close time	',7: 'Quote asset volume	',8: 'Number of trades	',9: 'Taker buy base asset volume',10: 'Taker buy quote asset volume',11: 'Ignore'}, inplace=True)
print(dataset_c.columns)
# %cd /content/binance-public-data/python/data/spot/daily/klines/BTCUSDT/1m
path = os.getcwd()
csv_files = glob.glob(os.path.join(path, "*.zip"))
li=[]
for f in csv_files:
      
    # read the csv file
    df = pd.read_csv(f, header=None)
    li.append(df)
    # print the location and filename
    print('Location:', f)
    print('File Name:', f.split("\\")[-1])
      
    # print the content
    print('Content:')
    display(df)
    print()
frame = pd.concat(li, ignore_index=True)
dataset_d=frame.copy()
dataset_d.columns
dataset_d.rename(columns={0:'Open time',1: 'Open',2: 'High',3: 'Low',4: 'Close',5: 'Volume',6: 'Close time	',7: 'Quote asset volume	',8: 'Number of trades	',9: 'Taker buy base asset volume',10: 'Taker buy quote asset volume',11: 'Ignore'}, inplace=True)
dataset_p=pd.concat([dataset_c,dataset_d])
dataset_p["Open time"].sort_values()

dataset_p.astype(str)

dataset_p=dataset_p.drop_duplicates()

dataset_p=dataset_p.astype(float)

dataset_p=dataset_p.sort_values(by=['Open time'])

dataset_c=dataset_p
dataset_c['Open time'] = pd.to_datetime(dataset_c['Open time'], unit='ms')

dataset_c.index=dataset_c['Open time']

dataset_c=dataset_c[["Open","High","Low","Close"]]

dataset_c

coin_rsi_o=calc_rsi(dataset_c,0)
coin_rsi_h=calc_rsi(dataset_c,1)
coin_rsi_l=calc_rsi(dataset_c,2)
coin_rsi_c=calc_rsi(dataset_c,3)
dataset_t=dataset_c.copy()
dataset_t

dataset_t["rsi_o"]=coin_rsi_o.values
dataset_t["rsi_h"]=coin_rsi_h.values
dataset_t["rsi_l"]=coin_rsi_l.values
dataset_t["rsi_c"]=coin_rsi_c.values

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
dataset_t.to_csv('btc_1m.csv', index=False)